{"version":3,"sources":["components/Node.js","algorithms/dijkstra.js","algorithms/astar.js","algorithms/jumpPointSearch.js","mazeGen/kruskall.js","mazeGen/recursiveDivison.js","mazeGen/Prim.js","components/Grid.js","actions/index.js","components/NavBar.js","components/Visited.js","components/ShortestPath.js","components/AlgoInfo.js","components/App.js","reducers/index.js","index.js"],"names":["Node","this","props","row","column","onMouseClick","onMouseEnterAndLeave","startNodeClass","endNodeClass","wallClass","statusClass","isStart","isEnd","isShortestPath","isVisited","isWall","id","className","ref","forwardRef","onClick","onMouseEnter","onMouseLeave","React","PureComponent","getShortestPath","node","shortestPath","unshift","prevNode","dijkstra","grid","startNode","endNode","allowDiag","visitedNodes","pq","PriorityQueue","comparator","a","b","distance","forEach","col","Infinity","queue","length","dequeue","push","n","j","i","r","c","dist","Math","abs","calculateHeuristic","heuristic","diagDist","ans","dx","dy","sqrt","d2","max","min","astar","f","h","g","gNew","hNew","fNew","scan","dir","x","y","r0","c0","c1","r1","inGrid","ng","nf","H","c2","r2","jump","hor","ver","jumpPointSearch","d","obj","shuffle","array","floor","random","kruskal","rows","columns","set","disjointSet","addedWalls","removedWalls","edges","add","edge","connected","union","animAddedWalls","divide","width","height","orientation","horizontal","wx","randEven","wy","px","randOdd","py","nx","ny","w","chooseOrientation","randomNumber","recursiveDivision","randomKey","keys","Object","getKey","toString","prim","open","frontier","start","randFKey","neighbours","every","index","wr","wc","randNeighbour","console","log","selectStart","selectEnd","selectWall","selectRemoveWall","isAnimated","GridContainer","withStyles","root","padding","marginRight","Card","TGrid","nodes","nodeRow","key","state","nodeRefs","setGrid","async","getInitGrid","changeGridEndNode","changeGridStartNode","setState","getNode","anim","current","classList","remove","visualizeRealTime","toggle","getRefs","refs","rowRef","createRef","clearVisited","setVisited","setShortest","clearGrid","visualize","setAnimating","getResponseFromAlgo","response","shift","pop","animate","sn","en","algo","diag","animateVisitedNodes","requestAnimationFrame","animateShortestPath","visualizeMaze","animMaze","getResponseFromMaze","maze","animateMaze","animateRemovedWalls","animateAddedWalls","gridRef","style","offsetWidth","window","addEventListener","e","Component","connect","isAnim","type","payload","visited","shortest","OrangeSwitch","switchBase","color","backgroundColor","checked","track","Switch","OrangeRadio","Radio","useStyles","makeStyles","theme","display","title","breakpoints","up","spacing","drawer","flexShrink","appBar","zIndex","palette","background","paper","menuButton","toolbar","mixins","toolButton","drawerPaper","border","content","flexGrow","card","borderRadius","cardHeadText","fontSize","header","paddingTop","paddingLeft","paddingBottom","selectAlgo","algoId","changeHeuristic","selectMaze","container","classes","useState","mobileOpen","setMobileOpen","handleDrawerToggle","handleAlgoClick","handleMazeItemClick","List","ListItem","FormControlLabel","control","disabled","onChange","value","label","Divider","Typography","variant","button","selected","event","Collapse","in","timeout","unmountOnExit","CardContent","FormLabel","RadioGroup","target","size","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","Button","disableElevation","Hidden","smUp","implementation","SwipeableDrawer","onOpen","onClose","ModalProps","keepMounted","smDown","Drawer","VisitedCard","marginBottom","progress","LinearProgress","ShortestPathCard","ColorLinearProgress","colorPrimary","barColorPrimary","AlgoInfoCard","useTransition","from","overflowX","transform","opacity","enter","leave","map","item","div","getTitle","getContent","darkTheme","createMuiTheme","default","divider","action","hover","active","overrides","MuiListItem","typography","fontFamily","App","useRef","useTheme","xs","matchMedia","matches","sm","md","lg","xl","getRow","getColumn","trail","useTrail","ThemeProvider","Grid","ShortestPath","combineReducers","1","store","createStore","reducers","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.12361d45.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Node extends React.PureComponent {\r\n  render() {\r\n    const {\r\n      row,\r\n      column,\r\n      onMouseClick,\r\n      onMouseEnterAndLeave,\r\n      startNodeClass,\r\n      endNodeClass,\r\n      wallClass\r\n    } = this.props;\r\n    const statusClass = this.props.isStart\r\n      ? startNodeClass\r\n      : this.props.isEnd\r\n      ? endNodeClass\r\n      : this.props.isShortestPath\r\n      ? \"shortest-path\"\r\n      : this.props.isVisited\r\n      ? \"visited\"\r\n      : this.props.isWall\r\n      ? wallClass\r\n      : \"\";\r\n    return (\r\n      <td\r\n        id={`node-${row}-${column}`}\r\n        className={`node ${statusClass}`}\r\n        ref={this.props.forwardRef}\r\n        onClick={() => onMouseClick(row, column)}\r\n        onMouseEnter={() => onMouseEnterAndLeave(row, column)}\r\n        onMouseLeave={() => onMouseEnterAndLeave(row, column)}\r\n      ></td>\r\n    );\r\n  }\r\n}\r\n\r\nexport default React.forwardRef((props, ref) => (\r\n  <Node {...props} forwardRef={ref} />\r\n));\r\n","import PriorityQueue from \"js-priority-queue\";\r\n\r\nconst dijkstra = (grid, startNode, endNode, allowDiag) => {\r\n  let visitedNodes = [];\r\n  let shortestPath = [];\r\n  let pq = new PriorityQueue({\r\n    comparator: function(a, b) {\r\n      return a.distance - b.distance;\r\n    }\r\n  });\r\n  grid.forEach(row =>\r\n    row.forEach(node => {\r\n      if (node.row === startNode.row && node.col === startNode.column) {\r\n        node.distance = 0;\r\n      } else node.distance = Infinity;\r\n      node.prevNode = null;\r\n    })\r\n  );\r\n  pq.queue(grid[startNode.row][startNode.column]);\r\n  while (pq.length) {\r\n    const node = pq.dequeue();\r\n    const { row, col } = node;\r\n    if (grid[row][col].isVisited) continue;\r\n    grid[row][col].isVisited = true;\r\n    visitedNodes.push(node);\r\n    //if (node.distance === Infinity) break;\r\n    const n = [\r\n      [1, 0],\r\n      [0, 1],\r\n      [-1, 0],\r\n      [0, -1]\r\n    ];\r\n    //with diag\r\n    if (allowDiag) n.push([-1, 1], [1, 1], [-1, -1], [1, -1]);\r\n    for (let j = 0; j < n.length; j++) {\r\n      const i = n[j];\r\n      const r = row + i[0];\r\n      const c = col + i[1];\r\n      if (\r\n        grid[r] &&\r\n        grid[r][c] &&\r\n        !grid[r][c].isVisited &&\r\n        (!grid[r][c].isWall || (r === endNode.row && c === endNode.column))\r\n      ) {\r\n        if (r === endNode.row && c === endNode.column) {\r\n          grid[r][c].isVisited = true;\r\n          grid[r][c].prevNode = grid[row][col];\r\n          shortestPath = getShortestPath(grid[r][c]);\r\n          return { visitedNodes, shortestPath };\r\n        }\r\n        const dist = Math.abs(i[0]) === 1 && Math.abs(i[1]) === 1 ? 1.4 : 1;\r\n        if (node.distance + dist < grid[r][c].distance) {\r\n          grid[r][c].prevNode = node;\r\n          grid[r][c].distance = node.distance + dist;\r\n        }\r\n        pq.queue(grid[r][c]);\r\n      }\r\n    }\r\n  }\r\n  return { visitedNodes, shortestPath };\r\n};\r\n\r\nconst getShortestPath = node => {\r\n  let shortestPath = [];\r\n  while (node !== null) {\r\n    shortestPath.unshift(node);\r\n    node = node.prevNode;\r\n    if (node) node.isShortestPath = true;\r\n  }\r\n  return shortestPath;\r\n};\r\n\r\nexport default dijkstra;\r\n","import PriorityQueue from \"js-priority-queue\";\r\n\r\nconst astar = (grid, startNode, endNode, heuristic, allowDiag) => {\r\n  let visitedNodes = [];\r\n  let shortestPath = [];\r\n  let diagDist = 1.414;\r\n  if (heuristic === \"chebyshev\") diagDist = 1;\r\n  let pq = new PriorityQueue({\r\n    comparator: function(a, b) {\r\n      //Tie-breaker\r\n      if (a.f === b.f) return a.h - b.h;\r\n      return a.f - b.f;\r\n    }\r\n  });\r\n  grid.forEach(row => {\r\n    row.forEach(node => {\r\n      //g : distance\r\n      node.g = Infinity;\r\n      //h : heuristic\r\n      node.h = Infinity;\r\n      //f = g + h\r\n      node.f = Infinity;\r\n      node.prevNode = null;\r\n    });\r\n  });\r\n  grid[startNode.row][startNode.column].g = 0;\r\n  grid[startNode.row][startNode.column].h = 0;\r\n  grid[startNode.row][startNode.column].f = 0;\r\n  pq.queue(grid[startNode.row][startNode.column]);\r\n  while (pq.length) {\r\n    const node = pq.dequeue();\r\n    const { row, col } = node;\r\n    grid[row][col].isVisited = true;\r\n    visitedNodes.push(node);\r\n    if (node.row === endNode.row && node.col === endNode.column) {\r\n      shortestPath = getShortestPath(node);\r\n      break;\r\n    }\r\n    const n = [\r\n      [1, 0],\r\n      [0, 1],\r\n      [-1, 0],\r\n      [0, -1]\r\n    ];\r\n    //with diag\r\n    if (allowDiag) n.push([-1, 1], [1, 1], [-1, -1], [1, -1]);\r\n    for (let j = 0; j < n.length; j++) {\r\n      const i = n[j];\r\n      const r = row + i[0];\r\n      const c = col + i[1];\r\n      if (\r\n        grid[r] &&\r\n        grid[r][c] &&\r\n        !grid[r][c].isVisited &&\r\n        (!grid[r][c].isWall || (r === endNode.row && c === endNode.column))\r\n      ) {\r\n        if (r === endNode.row && c === endNode.column) {\r\n          grid[r][c].isVisited = true;\r\n          grid[r][c].prevNode = grid[row][col];\r\n          shortestPath = getShortestPath(grid[r][c]);\r\n          return { visitedNodes, shortestPath };\r\n        }\r\n        const dist =\r\n          Math.abs(i[0]) === 1 && Math.abs(i[1]) === 1 ? diagDist : 1;\r\n        let gNew = grid[row][col].g + dist;\r\n        let hNew = calculateHeuristic(r, c, endNode, heuristic, diagDist);\r\n        let fNew = gNew + hNew;\r\n        if (grid[r][c].f > fNew) {\r\n          grid[r][c].g = gNew;\r\n          grid[r][c].h = hNew;\r\n          grid[r][c].f = fNew;\r\n          grid[r][c].prevNode = node;\r\n          pq.queue(grid[r][c]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return { visitedNodes, shortestPath };\r\n};\r\n\r\nconst calculateHeuristic = (row, col, endNode, heuristic, diagDist) => {\r\n  const dx = Math.abs(row - endNode.row);\r\n  const dy = Math.abs(col - endNode.column);\r\n  const d = 1;\r\n  let ans;\r\n  if (heuristic === \"manhatten\") {\r\n    ans = d * (dx + dy);\r\n  }\r\n  if (heuristic === \"euclidean\") {\r\n    ans = d * Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n  if (heuristic === \"octile\" || heuristic === \"chebyshev\") {\r\n    let d2 = diagDist;\r\n    ans = d * Math.max(dx, dy) + (d2 - d) * Math.min(dx, dy);\r\n  }\r\n  return ans;\r\n};\r\n\r\nconst getShortestPath = node => {\r\n  let shortestPath = [];\r\n  while (node !== null) {\r\n    shortestPath.unshift(node);\r\n    node = node.prevNode;\r\n    if (node) node.isShortestPath = true;\r\n  }\r\n  return shortestPath;\r\n};\r\n\r\nexport default astar;\r\n","import PriorityQueue from \"js-priority-queue\";\r\n\r\nconst jumpPointSearch = (grid, startNode, endNode) => {\r\n  let visitedNodes = [];\r\n  let shortestPath = [];\r\n  let pq = new PriorityQueue({\r\n    comparator: function(a, b) {\r\n      return a.node.f - b.node.f;\r\n    }\r\n  });\r\n  grid.forEach(row => {\r\n    row.forEach(node => {\r\n      //g : distance\r\n      node.g = Infinity;\r\n      //f = g + h\r\n      node.f = Infinity;\r\n      node.prevNode = null;\r\n    });\r\n  });\r\n  grid[startNode.row][startNode.column].g = 0;\r\n  grid[startNode.row][startNode.column].f = H(\r\n    startNode.row,\r\n    startNode.column,\r\n    endNode\r\n  );\r\n  //grid[startNode.row][startNode.column].isWall = false;\r\n  //grid[endNode.row][endNode.column].isWall = false;\r\n  const n = [\r\n    [1, 0],\r\n    [0, 1],\r\n    [-1, 0],\r\n    [0, -1],\r\n    [-1, 1],\r\n    [1, 1],\r\n    [-1, -1],\r\n    [1, -1]\r\n  ];\r\n\r\n  n.forEach(d => {\r\n    pq.queue({ node: grid[startNode.row][startNode.column], dir: d });\r\n    //grid[startNode.row][startNode.column].prevNode[d[0]][d[1]] = null;\r\n  });\r\n  while (pq.length) {\r\n    const obj = pq.dequeue();\r\n    if (!obj.node.isVisited) {\r\n      obj.node.isVisited = true;\r\n      visitedNodes.push(obj.node);\r\n    }\r\n    /*console.log(\r\n      obj.node.row + \",\" + obj.node.col + \"-dir:\" + obj.dir + \"-f:\" + obj.node.f\r\n    );*/\r\n    const response = scan(obj.node, obj.dir, grid, endNode, pq);\r\n    if (response === \"found\") {\r\n      break;\r\n    }\r\n  }\r\n  shortestPath = getShortestPath(grid[endNode.row][endNode.column]);\r\n  return { visitedNodes, shortestPath };\r\n};\r\n//x = c // y = r\r\n//hor = y // ver = x\r\nconst scan = (node, dir, grid, endNode, pq) => {\r\n  const x = dir[0];\r\n  const y = dir[1];\r\n  if (x !== 0 && y !== 0) {\r\n    let r0 = node.row;\r\n    let c0 = node.col;\r\n    while (true) {\r\n      //console.log(\"diag\");\r\n      //console.log(r0, c0);\r\n      let c1 = c0 + y;\r\n      let r1 = r0 + x;\r\n      if (!inGrid(r1, c1, grid)) return false;\r\n      let g = grid[r1][c1];\r\n      let ng = grid[r0][c0].g + 1;\r\n      let nf = ng + H(r1, c1, endNode);\r\n      if (g.f <= nf) return false;\r\n      g.g = ng;\r\n      g.f = nf;\r\n      if (g.row === endNode.row && g.col === endNode.column) {\r\n        grid[r1][c1].prevNode = grid[r0][c0];\r\n        return \"found\";\r\n      }\r\n      if (g.isWall) return false;\r\n      grid[r1][c1].prevNode = grid[r0][c0];\r\n      let c2 = c1 + y;\r\n      let r2 = r1 + x;\r\n      let jump = false;\r\n      if (\r\n        inGrid(r1, c0, grid) &&\r\n        grid[r1][c0].isWall &&\r\n        inGrid(r2, c0, grid) &&\r\n        (!grid[r2][c0].isWall || (r2 === endNode.row && c0 === endNode.column))\r\n      ) {\r\n        pq.queue({ node: grid[r1][c1], dir: [x, -y] });\r\n        jump = true;\r\n      }\r\n      if (\r\n        inGrid(r0, c1, grid) &&\r\n        grid[r0][c1].isWall &&\r\n        inGrid(r0, c2, grid) &&\r\n        (!grid[r0][c2].isWall || (r0 === endNode.row && c2 === endNode.column))\r\n      ) {\r\n        pq.queue({ node: grid[r1][c1], dir: [-x, y] });\r\n        jump = true;\r\n      }\r\n      let hor = scan(grid[r1][c1], [0, y], grid, endNode, pq);\r\n      let ver = scan(grid[r1][c1], [x, 0], grid, endNode, pq);\r\n      if (hor === \"found\" || ver === \"found\") return \"found\";\r\n      if (hor || ver) {\r\n        jump = true;\r\n      }\r\n      if (jump) {\r\n        pq.queue({ node: grid[r1][c1], dir: [x, y] });\r\n        return true;\r\n      }\r\n      c0 = c1;\r\n      r0 = r1;\r\n    }\r\n  } else if (x === 0) {\r\n    let r0 = node.row;\r\n    let c0 = node.col;\r\n    while (true) {\r\n      //console.log(\"row\");\r\n      //console.log(r0, c0);\r\n      let c1 = c0 + y;\r\n      if (!inGrid(r0, c1, grid)) return false;\r\n      let g = grid[r0][c1];\r\n      let ng = grid[r0][c0].g + 1;\r\n      let nf = ng + H(r0, c1, endNode);\r\n      if (g.f <= nf) return false;\r\n      g.g = ng;\r\n      g.f = nf;\r\n      if (g.row === endNode.row && g.col === endNode.column) {\r\n        grid[r0][c1].prevNode = grid[r0][c0];\r\n        return \"found\";\r\n      }\r\n      if (g.isWall) return false;\r\n      grid[r0][c1].prevNode = grid[r0][c0];\r\n      let c2 = c1 + y;\r\n      let jump = false;\r\n      if (\r\n        inGrid(r0 - 1, c1, grid) &&\r\n        grid[r0 - 1][c1].isWall &&\r\n        inGrid(r0 - 1, c2, grid) &&\r\n        (!grid[r0 - 1][c2].isWall ||\r\n          (r0 - 1 === endNode.row && c2 === endNode.column))\r\n      ) {\r\n        pq.queue({ node: grid[r0][c1], dir: [-1, y] });\r\n        jump = true;\r\n      }\r\n      if (\r\n        inGrid(r0 + 1, c1, grid) &&\r\n        grid[r0 + 1][c1].isWall &&\r\n        inGrid(r0 + 1, c2, grid) &&\r\n        (!grid[r0 + 1][c2].isWall ||\r\n          (r0 + 1 === endNode.row && c2 === endNode.column))\r\n      ) {\r\n        pq.queue({ node: grid[r0][c1], dir: [1, y] });\r\n        jump = true;\r\n      }\r\n      if (jump) {\r\n        pq.queue({ node: grid[r0][c1], dir: [0, y] });\r\n        return true;\r\n      }\r\n      c0 = c1;\r\n    }\r\n  } else if (y === 0) {\r\n    let r0 = node.row;\r\n    let c0 = node.col;\r\n    while (true) {\r\n      //console.log(\"col\");\r\n      //console.log(r0, c0);\r\n      let r1 = r0 + x;\r\n      if (!inGrid(r1, c0, grid)) return false;\r\n      let g = grid[r1][c0];\r\n      let ng = grid[r0][c0].g + 1;\r\n      let nf = ng + H(r1, c0, endNode);\r\n      if (g.f <= nf) return false;\r\n      g.g = ng;\r\n      g.f = nf;\r\n      if (g.row === endNode.row && g.col === endNode.column) {\r\n        grid[r1][c0].prevNode = grid[r0][c0];\r\n        return \"found\";\r\n      }\r\n      if (g.isWall) return false;\r\n      grid[r1][c0].prevNode = grid[r0][c0];\r\n      let r2 = r1 + x;\r\n      let jump = false;\r\n      if (\r\n        inGrid(r1, c0 - 1, grid) &&\r\n        grid[r1][c0 - 1].isWall &&\r\n        inGrid(r2, c0 - 1, grid) &&\r\n        (!grid[r2][c0 - 1].isWall ||\r\n          (r2 === endNode.row && c0 - 1 === endNode.column))\r\n      ) {\r\n        pq.queue({ node: grid[r1][c0], dir: [x, -1] });\r\n        jump = true;\r\n      }\r\n      if (\r\n        inGrid(r1, c0 + 1, grid) &&\r\n        grid[r1][c0 + 1].isWall &&\r\n        inGrid(r2, c0 + 1, grid) &&\r\n        (!grid[r2][c0 + 1].isWall ||\r\n          (r2 === endNode.row && c0 + 1 === endNode.column))\r\n      ) {\r\n        pq.queue({ node: grid[r1][c0], dir: [x, 1] });\r\n        jump = true;\r\n      }\r\n      if (jump) {\r\n        pq.queue({ node: grid[r1][c0], dir: [x, y] });\r\n        return true;\r\n      }\r\n      r0 = r1;\r\n    }\r\n  }\r\n};\r\n\r\nconst inGrid = (row, col, grid) => {\r\n  return grid[row] && grid[row][col];\r\n};\r\n\r\nconst H = (row, col, endNode) => {\r\n  const dx = Math.abs(row - endNode.row);\r\n  const dy = Math.abs(col - endNode.column);\r\n  const d = 1;\r\n  let ans = d * Math.sqrt(dx * dx + dy * dy);\r\n  /*if (heuristic === \"manhatten\") {\r\n      ans = d * (dx + dy);\r\n    }\r\n    if (heuristic === \"euclidean\") {\r\n      ans = d * Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    if (heuristic === \"octile\" || heuristic === \"chebyshev\") {\r\n      let d2 = diagDist;\r\n      ans = d * Math.max(dx, dy) + (d2 - d) * Math.min(dx, dy);\r\n    }*/\r\n  return ans;\r\n};\r\n\r\nconst getShortestPath = node => {\r\n  let shortestPath = [];\r\n  while (node !== null) {\r\n    shortestPath.unshift(node);\r\n    node = node.prevNode;\r\n    if (node) node.isShortestPath = true;\r\n  }\r\n  return shortestPath;\r\n};\r\n\r\nexport default jumpPointSearch;\r\n","import disjointSet from \"disjoint-set\";\r\n\r\nconst kruskal = (grid, rows, columns) => {\r\n  const set = disjointSet();\r\n  let addedWalls = [];\r\n  let removedWalls = [];\r\n  let edges = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    for (let j = 0; j < columns; j++) {\r\n      if (i % 2 === 0 || j % 2 === 0) {\r\n        if (i !== 0 && j !== 0 && i !== rows - 1 && j !== columns - 1) {\r\n          edges.push(grid[i][j]);\r\n        }\r\n      } else set.add(grid[i][j]);\r\n      grid[i][j].isWall = true;\r\n      addedWalls.push(grid[i][j]);\r\n    }\r\n  }\r\n  shuffle(edges);\r\n  edges.forEach(edge => {\r\n    if (\r\n      edge.row % 2 !== 0 &&\r\n      !set.connected(grid[edge.row][edge.col - 1], grid[edge.row][edge.col + 1])\r\n    ) {\r\n      set.union(grid[edge.row][edge.col - 1], grid[edge.row][edge.col + 1]);\r\n      grid[edge.row][edge.col].isWall = false;\r\n      grid[edge.row][edge.col - 1].isWall = false;\r\n      grid[edge.row][edge.col + 1].isWall = false;\r\n      removedWalls.push(grid[edge.row][edge.col - 1]);\r\n      removedWalls.push(grid[edge.row][edge.col]);\r\n      removedWalls.push(grid[edge.row][edge.col + 1]);\r\n    }\r\n    if (\r\n      edge.col % 2 !== 0 &&\r\n      !set.connected(grid[edge.row - 1][edge.col], grid[edge.row + 1][edge.col])\r\n    ) {\r\n      set.union(grid[edge.row - 1][edge.col], grid[edge.row + 1][edge.col]);\r\n      grid[edge.row][edge.col].isWall = false;\r\n      grid[edge.row - 1][edge.col].isWall = false;\r\n      grid[edge.row + 1][edge.col].isWall = false;\r\n      removedWalls.push(grid[edge.row - 1][edge.col]);\r\n      removedWalls.push(grid[edge.row][edge.col]);\r\n      removedWalls.push(grid[edge.row + 1][edge.col]);\r\n    }\r\n  });\r\n  return { addedWalls, removedWalls, animAddedWalls: false };\r\n};\r\n\r\nconst shuffle = array => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n};\r\n\r\nexport default kruskal;\r\n","const HORIZONTAL = \"horizontal\";\r\nconst VERTICAL = \"vertical\";\r\nlet addedWalls = [];\r\nlet removedWalls = [];\r\nconst recursiveDivision = (grid, rows, columns) => {\r\n  addedWalls = [];\r\n  removedWalls = [];\r\n  for (let i = 0; i < rows; i++) {\r\n    grid[i][0].isWall = true;\r\n    grid[rows - i - 1][columns - 1].isWall = true;\r\n    addedWalls.push(grid[i][0]);\r\n    addedWalls.push(grid[rows - i - 1][columns - 1]);\r\n  }\r\n  for (let j = 0; j < columns; j++) {\r\n    grid[0][columns - j - 1].isWall = true;\r\n    grid[rows - 1][j].isWall = true;\r\n    addedWalls.push(grid[0][columns - j - 1]);\r\n    addedWalls.push(grid[rows - 1][j]);\r\n  }\r\n  const width = columns;\r\n  const height = rows;\r\n  divide(grid, 0, 0, width, height, chooseOrientation(width, height));\r\n\r\n  return { addedWalls, removedWalls, animAddedWalls: true };\r\n};\r\n\r\nconst divide = (grid, x, y, width, height, orientation) => {\r\n  if (height < 2 && width < 2) return;\r\n  const horizontal = orientation === HORIZONTAL;\r\n  let wx = x + (horizontal ? randEven(height - 2) : 0);\r\n  let wy = y + (horizontal ? 0 : randEven(width - 2));\r\n  const px = wx + (horizontal ? 0 : randOdd(height));\r\n  const py = wy + (horizontal ? randOdd(width) : 0);\r\n  const dx = horizontal ? 0 : 1;\r\n  const dy = horizontal ? 1 : 0;\r\n  do {\r\n    if (wx !== px || wy !== py) {\r\n      grid[wx][wy].isWall = true;\r\n      addedWalls.push(grid[wx][wy]);\r\n    }\r\n    wx += dx;\r\n    wy += dy;\r\n  } while (grid[wx][wy].isWall !== true);\r\n  let nx = x;\r\n  let ny = y;\r\n  let w = horizontal ? width : wy - y;\r\n  let h = horizontal ? wx - x : height;\r\n  divide(grid, nx, ny, w, h, chooseOrientation(w, h));\r\n  ny = horizontal ? y : wy;\r\n  nx = horizontal ? wx : x;\r\n  w = horizontal ? width : y + width - wy - 1;\r\n  h = horizontal ? x + height - wx - 1 : height;\r\n  divide(grid, nx, ny, w, h, chooseOrientation(w, h));\r\n};\r\n\r\nconst chooseOrientation = (width, height) => {\r\n  if (width < height) return HORIZONTAL;\r\n  else if (width > height) return VERTICAL;\r\n  return Math.random() >= 0.5 ? HORIZONTAL : VERTICAL;\r\n};\r\n\r\nconst randEven = i => {\r\n  return Math.floor(randomNumber(i, 2) / 2) * 2;\r\n};\r\nconst randOdd = i => {\r\n  return Math.floor(Math.random() * (i / 2)) * 2 + 1;\r\n};\r\n\r\nconst randomNumber = (max, min) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nexport default recursiveDivision;\r\n","const prim = (grid, rows, columns) => {\r\n  let addedWalls = [];\r\n  let removedWalls = [];\r\n  let open = {};\r\n  let frontier = {};\r\n  for (let i = 0; i < rows; i++) {\r\n    for (let j = 0; j < columns; j++) {\r\n      if (i % 2 === 0 || j % 2 === 0) {\r\n      } else open[getKey(i, j)] = grid[i][j];\r\n      grid[i][j].isWall = true;\r\n      addedWalls.push(grid[i][j]);\r\n    }\r\n  }\r\n  const f = [\r\n    [2, 0],\r\n    [-2, 0],\r\n    [0, 2],\r\n    [0, -2]\r\n  ];\r\n  const n = [\r\n    [1, 0],\r\n    [-1, 0],\r\n    [0, 1],\r\n    [0, -1]\r\n  ];\r\n  const start = open[randomKey(open)];\r\n  grid[start.row][start.col].isWall = false;\r\n  removedWalls.push(grid[start.row][start.col]);\r\n  f.forEach(i => {\r\n    const r = start.row + i[0];\r\n    const c = start.col + i[1];\r\n    if (\r\n      grid[r] &&\r\n      grid[r][c] &&\r\n      grid[r][c].isWall &&\r\n      r !== 0 &&\r\n      c !== 0 &&\r\n      r !== rows - 1 &&\r\n      c !== columns - 1\r\n    )\r\n      frontier[getKey(r, c)] = grid[r][c];\r\n  });\r\n\r\n  while (Object.keys(frontier).length) {\r\n    const randFKey = randomKey(frontier);\r\n    const { row, col } = frontier[randFKey];\r\n    let neighbours = {};\r\n    f.every((i, index) => {\r\n      const r = row + i[0];\r\n      const c = col + i[1];\r\n      const wr = row + n[index][0];\r\n      const wc = col + n[index][1];\r\n      if (grid[r] && grid[r][c] && !grid[r][c].isWall) {\r\n        neighbours[getKey(wr, wc)] = grid[wr][wc];\r\n        //return false for skew towards start\r\n        //return false;\r\n      }\r\n      return true;\r\n    });\r\n    const randNeighbour = neighbours[randomKey(neighbours)];\r\n    grid[randNeighbour.row][randNeighbour.col].isWall = false;\r\n    grid[frontier[randFKey].row][frontier[randFKey].col].isWall = false;\r\n    removedWalls.push(grid[randNeighbour.row][randNeighbour.col]);\r\n    removedWalls.push(grid[frontier[randFKey].row][frontier[randFKey].col]);\r\n    f.forEach(i => {\r\n      const r = frontier[randFKey].row + i[0];\r\n      const c = frontier[randFKey].col + i[1];\r\n      if (\r\n        grid[r] &&\r\n        grid[r][c] &&\r\n        grid[r][c].isWall &&\r\n        r !== 0 &&\r\n        c !== 0 &&\r\n        r !== rows - 1 &&\r\n        c !== columns - 1\r\n      )\r\n        frontier[getKey(r, c)] = grid[r][c];\r\n    });\r\n    delete frontier[randFKey];\r\n  }\r\n  console.log(addedWalls.length);\r\n  return { addedWalls, removedWalls, animAddedWalls: false };\r\n};\r\n\r\nconst randomKey = obj => {\r\n  var keys = Object.keys(obj);\r\n  return keys[(keys.length * Math.random()) << 0];\r\n};\r\n\r\nconst getKey = (i, j) => {\r\n  return i.toString() + \"-\" + j.toString();\r\n};\r\n\r\nexport default prim;\r\n","import React from \"react\";\r\nimport Node from \"./Node\";\r\nimport dijkstra from \"../algorithms/dijkstra\";\r\nimport astar from \"../algorithms/astar\";\r\nimport jumpPointSearch from \"../algorithms/jumpPointSearch\";\r\nimport kruskal from \"../mazeGen/kruskall\";\r\nimport recursiveDivision from \"../mazeGen/recursiveDivison\";\r\nimport prim from \"../mazeGen/Prim\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { setAnimating, setVisited, setShortest } from \"../actions\";\r\n\r\nlet startNode = { row: 20, column: 4 };\r\nlet endNode = { row: 20, column: 27 };\r\nlet selectStart = false;\r\nlet selectEnd = false;\r\nlet selectWall = false;\r\nlet selectRemoveWall = false;\r\nlet isAnimated = false;\r\n\r\nconst startNodeClass = \"start-node\";\r\nconst endNodeClass = \"end-node\";\r\nconst wallClass = \"wall\";\r\n\r\nconst GridContainer = withStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    padding: \"1vw\",\r\n    marginRight: \"1vw\"\r\n  }\r\n})(Card);\r\n\r\nclass TGrid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: []\r\n    };\r\n    this.nodeRefs = this.getRefs();\r\n    this.gridRef = React.createRef();\r\n  }\r\n  async componentDidMount() {\r\n    await this.setGrid();\r\n    this.gridRef.current.style.height = `${(this.gridRef.current.offsetWidth /\r\n      this.props.columns) *\r\n      this.props.rows}px`;\r\n    window.addEventListener(\"resize\", e => {\r\n      this.gridRef.current.style.height = `${(this.gridRef.current.offsetWidth /\r\n        this.props.columns) *\r\n        this.props.rows}px`;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (isAnimated) {\r\n      const response = this.visualizeRealTime(startNode, endNode);\r\n      this.props.setVisited(response.visitedNodes.length);\r\n      this.props.setShortest(response.shortestPath.length);\r\n    }\r\n    if (this.state.grid.length === 0) return <div>Loading...</div>;\r\n    return (\r\n      <GridContainer ref={this.gridRef}>\r\n        <table className=\"grid\">\r\n          <tbody>{this.nodes()}</tbody>\r\n        </table>\r\n      </GridContainer>\r\n    );\r\n  }\r\n\r\n  nodes = () => {\r\n    let nodes = [];\r\n    for (let i = 0; i < this.props.rows; i++) {\r\n      let nodeRow = [];\r\n      for (let j = 0; j < this.props.columns; j++)\r\n        nodeRow.push(\r\n          <Node\r\n            key={i.toString() + \"-\" + j.toString()}\r\n            startNodeClass={startNodeClass}\r\n            endNodeClass={endNodeClass}\r\n            wallClass={wallClass}\r\n            row={this.state.grid[i][j].row}\r\n            column={this.state.grid[i][j].col}\r\n            isStart={this.state.grid[i][j].isStart}\r\n            isEnd={this.state.grid[i][j].isEnd}\r\n            isVisited={this.state.grid[i][j].isVisited}\r\n            isWall={this.state.grid[i][j].isWall}\r\n            isShortestPath={this.state.grid[i][j].isShortestPath}\r\n            onMouseClick={this.onMouseClick}\r\n            onMouseEnterAndLeave={this.onMouseEnterAndLeave}\r\n            ref={this.nodeRefs[i][j]}\r\n          />\r\n        );\r\n      nodes.push(<tr key={i}>{nodeRow}</tr>);\r\n    }\r\n    return nodes;\r\n  };\r\n  setGrid = async (grid = this.getInitGrid()) => {\r\n    if (selectEnd) {\r\n      selectEnd = false;\r\n      this.changeGridEndNode(endNode.row, endNode.column, grid);\r\n    }\r\n    if (selectStart) {\r\n      selectStart = false;\r\n      this.changeGridStartNode(startNode.row, startNode.column, grid);\r\n    }\r\n    if (selectWall) {\r\n      selectWall = false;\r\n      await this.setState({});\r\n    }\r\n    this.setState({ grid });\r\n  };\r\n\r\n  getInitGrid = () => {\r\n    let grid = [];\r\n    for (let i = 0; i < this.props.rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < this.props.columns; j++) row.push(this.getNode(i, j));\r\n      grid.push(row);\r\n    }\r\n    return grid;\r\n  };\r\n  getNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart: row === startNode.row && col === startNode.column,\r\n      isEnd: row === endNode.row && col === endNode.column,\r\n      isVisited: false,\r\n      isShortestPath: false,\r\n      isWall: false\r\n    };\r\n  };\r\n  onMouseClick = async (row, column) => {\r\n    if (this.props.anim) return;\r\n    if (selectStart) {\r\n      if (row !== endNode.row || column !== endNode.column) {\r\n        selectStart = false;\r\n        this.changeGridStartNode(row, column);\r\n      }\r\n    } else if (\r\n      row === startNode.row &&\r\n      column === startNode.column &&\r\n      !selectEnd\r\n    ) {\r\n      selectStart = true;\r\n      if (this.state.grid[row][column].isWall)\r\n        this.nodeRefs[row][column].current.classList.add(wallClass);\r\n    } else if (selectEnd) {\r\n      if (row !== startNode.row || column !== startNode.column) {\r\n        selectEnd = false;\r\n        this.changeGridEndNode(row, column);\r\n      }\r\n    } else if (\r\n      row === endNode.row &&\r\n      column === endNode.column &&\r\n      !selectStart\r\n    ) {\r\n      selectEnd = true;\r\n      if (this.state.grid[row][column].isWall)\r\n        this.nodeRefs[row][column].current.classList.add(wallClass);\r\n    } else if (selectWall) {\r\n      selectWall = false;\r\n      await this.setGrid(this.state.grid);\r\n    } else if (this.state.grid[row][column].isWall) {\r\n      selectRemoveWall = true;\r\n      this.nodeRefs[row][column].current.classList.remove(wallClass);\r\n      let grid = this.state.grid;\r\n      grid[row][column].isWall = false;\r\n      if (isAnimated) this.visualizeRealTime(startNode, endNode);\r\n    } else if (selectRemoveWall) {\r\n      selectRemoveWall = false;\r\n      await this.setGrid(this.state.grid);\r\n    } else {\r\n      selectWall = true;\r\n      this.nodeRefs[row][column].current.classList.add(wallClass);\r\n      let grid = this.state.grid;\r\n      grid[row][column].isWall = true;\r\n      if (isAnimated) this.visualizeRealTime(startNode, endNode);\r\n    }\r\n  };\r\n  onMouseEnterAndLeave = (row, column) => {\r\n    //Just changing the class using refs.\r\n    if (selectStart) {\r\n      if (row !== endNode.row || column !== endNode.column) {\r\n        this.nodeRefs[row][column].current.classList.toggle(startNodeClass);\r\n        if (isAnimated) this.visualizeRealTime({ row, column }, endNode);\r\n      }\r\n    } else if (selectEnd) {\r\n      if (row !== startNode.row || column !== startNode.column) {\r\n        this.nodeRefs[row][column].current.classList.toggle(endNodeClass);\r\n        if (isAnimated) this.visualizeRealTime(startNode, { row, column });\r\n      }\r\n    } else if (selectWall) {\r\n      if (\r\n        (row !== endNode.row || column !== endNode.column) &&\r\n        (row !== startNode.row || column !== startNode.column)\r\n      ) {\r\n        this.nodeRefs[row][column].current.classList.add(wallClass);\r\n        let grid = this.state.grid;\r\n        grid[row][column].isWall = true;\r\n        if (isAnimated) this.visualizeRealTime(startNode, endNode);\r\n      }\r\n    } else if (selectRemoveWall) {\r\n      if (\r\n        (row !== endNode.row || column !== endNode.column) &&\r\n        (row !== startNode.row || column !== startNode.column)\r\n      ) {\r\n        this.nodeRefs[row][column].current.classList.remove(wallClass);\r\n        let grid = this.state.grid;\r\n        grid[row][column].isWall = false;\r\n        if (isAnimated) this.visualizeRealTime(startNode, endNode);\r\n      }\r\n    }\r\n  };\r\n  getRefs = () => {\r\n    let refs = [];\r\n    for (let i = 0; i < this.props.rows; i++) {\r\n      let rowRef = [];\r\n      for (let j = 0; j < this.props.columns; j++)\r\n        rowRef.push(React.createRef());\r\n      refs.push(rowRef);\r\n    }\r\n    return refs;\r\n  };\r\n  changeGridStartNode = (row, column, grid = this.state.grid) => {\r\n    grid[startNode.row][startNode.column].isStart = false;\r\n    startNode = { row, column };\r\n    grid[startNode.row][startNode.column].isStart = true;\r\n    this.nodeRefs[row][column].current.classList.add(startNodeClass);\r\n    this.setGrid(grid);\r\n  };\r\n  changeGridEndNode = (row, column, grid = this.state.grid) => {\r\n    grid[endNode.row][endNode.column].isEnd = false;\r\n    endNode = { row, column };\r\n    grid[endNode.row][endNode.column].isEnd = true;\r\n    this.nodeRefs[row][column].current.classList.add(endNodeClass);\r\n    this.setGrid(grid);\r\n  };\r\n  clearVisited = grid => {\r\n    this.props.setVisited(0);\r\n    this.props.setShortest(0);\r\n    grid.forEach(row =>\r\n      row.forEach(node => {\r\n        node.isShortestPath = false;\r\n        node.isVisited = false;\r\n        this.nodeRefs[node.row][node.col].current.classList.remove(\"visited\");\r\n        this.nodeRefs[node.row][node.col].current.classList.remove(\r\n          \"shortest-path\"\r\n        );\r\n        this.nodeRefs[node.row][node.col].current.classList.remove(\r\n          \"visited-anim\"\r\n        );\r\n        this.nodeRefs[node.row][node.col].current.classList.remove(\r\n          \"shortest-path-anim\"\r\n        );\r\n      })\r\n    );\r\n  };\r\n  clearGrid = () => {\r\n    isAnimated = false;\r\n    this.props.setVisited(0);\r\n    this.props.setShortest(0);\r\n    this.setGrid();\r\n  };\r\n  visualize = async () => {\r\n    this.props.setAnimating(true);\r\n    let grid = this.state.grid;\r\n    await this.setGrid(grid);\r\n    this.clearVisited(grid);\r\n    const response = await this.getResponseFromAlgo(grid, startNode, endNode);\r\n    const { visitedNodes, shortestPath } = response;\r\n    visitedNodes.shift();\r\n    shortestPath.shift();\r\n    shortestPath.pop();\r\n    if (visitedNodes.length === 0 && shortestPath.length === 0) {\r\n      this.props.setAnimating(false);\r\n      this.setGrid(grid);\r\n      return;\r\n    }\r\n    this.animate(visitedNodes, shortestPath, grid);\r\n  };\r\n  getResponseFromAlgo = (grid, sn, en) => {\r\n    let response;\r\n    switch (this.props.algo) {\r\n      case 0:\r\n        response = dijkstra(grid, sn, en, this.props.diag);\r\n        break;\r\n      case 1:\r\n        response = astar(\r\n          grid,\r\n          sn,\r\n          en,\r\n          this.props.heuristic[1],\r\n          this.props.diag\r\n        );\r\n        break;\r\n      case 2:\r\n        response = jumpPointSearch(grid, sn, en);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return response;\r\n  };\r\n  animate = async (visitedNodes, shortestPath, grid) => {\r\n    let i = 0,\r\n      j = 0;\r\n    const animateVisitedNodes = async () => {\r\n      if (i === visitedNodes.length) {\r\n        if (shortestPath.length) requestAnimationFrame(animateShortestPath);\r\n        else {\r\n          isAnimated = true;\r\n          this.props.setAnimating(false);\r\n          this.setGrid(grid);\r\n        }\r\n        return;\r\n      }\r\n      const { row, col } = visitedNodes[i];\r\n      this.nodeRefs[row][col].current.classList.add(\"visited-anim\");\r\n      ++i;\r\n      this.props.setVisited(i);\r\n      requestAnimationFrame(animateVisitedNodes);\r\n    };\r\n    const animateShortestPath = () => {\r\n      if (j === shortestPath.length) {\r\n        isAnimated = true;\r\n        this.props.setAnimating(false);\r\n        this.setGrid(grid);\r\n        return;\r\n      }\r\n      const { row, col } = shortestPath[j];\r\n      this.nodeRefs[row][col].current.classList.add(\"shortest-path-anim\");\r\n      ++j;\r\n      this.props.setShortest(j);\r\n      requestAnimationFrame(animateShortestPath);\r\n    };\r\n    await requestAnimationFrame(animateVisitedNodes);\r\n  };\r\n\r\n  visualizeRealTime = (sn, en) => {\r\n    let grid = this.state.grid;\r\n    this.clearVisited(grid);\r\n    const { visitedNodes, shortestPath } = this.getResponseFromAlgo(\r\n      grid,\r\n      sn,\r\n      en\r\n    );\r\n    this.props.setVisited(visitedNodes.length);\r\n    this.props.setShortest(shortestPath.length);\r\n    visitedNodes.shift();\r\n    shortestPath.shift();\r\n    shortestPath.pop();\r\n    visitedNodes.forEach(node => {\r\n      this.nodeRefs[node.row][node.col].current.classList.add(\"visited\");\r\n    });\r\n    shortestPath.forEach(node => {\r\n      this.nodeRefs[node.row][node.col].current.classList.add(\"shortest-path\");\r\n    });\r\n    return { visitedNodes, shortestPath };\r\n  };\r\n\r\n  visualizeMaze = async () => {\r\n    await this.clearGrid();\r\n    let grid = this.state.grid;\r\n    if (!this.props.animMaze) {\r\n      this.getResponseFromMaze(grid, this.props.maze);\r\n      await this.setGrid(grid);\r\n    } else {\r\n      this.props.setAnimating(true);\r\n      await this.setGrid(grid);\r\n      const {\r\n        addedWalls,\r\n        removedWalls,\r\n        animAddedWalls\r\n      } = this.getResponseFromMaze(grid);\r\n      this.animateMaze(addedWalls, removedWalls, grid, animAddedWalls);\r\n    }\r\n  };\r\n\r\n  getResponseFromMaze = grid => {\r\n    switch (this.props.maze) {\r\n      case 0:\r\n        return kruskal(grid, this.props.rows, this.props.columns);\r\n      case 1:\r\n        return prim(grid, this.props.rows, this.props.columns);\r\n      case 2:\r\n        return recursiveDivision(grid, this.props.rows, this.props.columns);\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  animateMaze = (addedWalls, removedWalls, grid, animAddedWalls) => {\r\n    let i = 0;\r\n    const animateAddedWalls = () => {\r\n      if (i === addedWalls.length) {\r\n        if (removedWalls.length) requestAnimationFrame(animateRemovedWalls);\r\n        else {\r\n          this.props.setAnimating(false);\r\n          this.setGrid(grid);\r\n        }\r\n        return;\r\n      }\r\n      const { row, col } = addedWalls[i];\r\n      this.nodeRefs[row][col].current.classList.add(wallClass);\r\n      ++i;\r\n      requestAnimationFrame(animateAddedWalls);\r\n    };\r\n    let j = 0;\r\n    const animateRemovedWalls = () => {\r\n      if (j === removedWalls.length) {\r\n        this.props.setAnimating(false);\r\n        this.setGrid(grid);\r\n        return;\r\n      }\r\n      const { row, col } = removedWalls[j];\r\n      this.nodeRefs[row][col].current.classList.remove(wallClass);\r\n      ++j;\r\n      requestAnimationFrame(animateRemovedWalls);\r\n    };\r\n    const showAddedWalls = () => {\r\n      addedWalls.forEach(node =>\r\n        this.nodeRefs[node.row][node.col].current.classList.add(wallClass)\r\n      );\r\n    };\r\n    if (animAddedWalls) {\r\n      requestAnimationFrame(animateAddedWalls);\r\n    } else {\r\n      showAddedWalls();\r\n      requestAnimationFrame(animateRemovedWalls);\r\n    }\r\n  };\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    algo: state.algo,\r\n    diag: state.diag,\r\n    heuristic: state.heuristic,\r\n    maze: state.maze,\r\n    animMaze: state.animMaze,\r\n    anim: state.anim\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { setAnimating, setVisited, setShortest },\r\n  null,\r\n  {\r\n    forwardRef: true\r\n  }\r\n)(TGrid);\r\n","export const selectAlgo = algoId => {\r\n  return {\r\n    type: \"SELECT_ALGO\",\r\n    payload: algoId\r\n  };\r\n};\r\n\r\nexport const allowDiag = allowDiag => {\r\n  return {\r\n    type: \"ALLOW_DIAG\",\r\n    payload: allowDiag\r\n  };\r\n};\r\n\r\nexport const changeHeuristic = heuristic => {\r\n  return {\r\n    type: \"CHANGE_HEURISTIC\",\r\n    payload: heuristic\r\n  };\r\n};\r\n\r\nexport const selectMaze = maze => {\r\n  return {\r\n    type: \"SELECT_MAZE\",\r\n    payload: maze\r\n  };\r\n};\r\n\r\nexport const animateMaze = animMaze => {\r\n  return {\r\n    type: \"ANIMATE_MAZE\",\r\n    payload: animMaze\r\n  };\r\n};\r\n\r\nexport const setAnimating = isAnim => {\r\n  return {\r\n    type: \"SET_ANIMATING\",\r\n    payload: isAnim\r\n  };\r\n};\r\n\r\nexport const setVisited = visited => {\r\n  return {\r\n    type: \"SET_VISITED\",\r\n    payload: visited\r\n  };\r\n};\r\n\r\nexport const setShortest = shortest => {\r\n  return {\r\n    type: \"SET_SHORTEST\",\r\n    payload: shortest\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport { Divider } from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  selectAlgo,\r\n  allowDiag,\r\n  changeHeuristic,\r\n  selectMaze,\r\n  animateMaze\r\n} from \"../actions\";\r\n\r\nconst drawerWidth = 275;\r\n\r\nconst OrangeSwitch = withStyles({\r\n  switchBase: {\r\n    color: \"#FFCC80\",\r\n    \"&$checked\": {\r\n      color: \"#EF6C00\"\r\n    },\r\n    \"&$checked + $track\": {\r\n      backgroundColor: \"#E65100\"\r\n    }\r\n  },\r\n  checked: {},\r\n  track: {}\r\n})(Switch);\r\n\r\nconst OrangeRadio = withStyles({\r\n  root: {\r\n    color: \"\",\r\n    \"&$checked\": {\r\n      color: \"#EF6C00\"\r\n    }\r\n  },\r\n  checked: {}\r\n})(props => <Radio color=\"default\" {...props} />);\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\"\r\n  },\r\n  title: {\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"block\",\r\n      marginRight: theme.spacing(6)\r\n    }\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0\r\n    }\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      zIndex: theme.zIndex.drawer + 1\r\n    },\r\n    border: 0,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: \"0 0.5rem 1rem 0 #1a1f33\"\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      display: \"none\"\r\n    }\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  toolButton: {\r\n    marginRight: \"1vw\"\r\n  },\r\n  drawerPaper: {\r\n    //Color for actual drawer can be set here\r\n    width: drawerWidth,\r\n    border: 0\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3)\r\n  },\r\n  card: {\r\n    width: \"100%\",\r\n    borderRadius: \"0.5vw\"\r\n  },\r\n  cardHeadText: {\r\n    padding: \"1vh\",\r\n    fontSize: \"1rem\"\r\n  },\r\n  header: {\r\n    paddingTop: theme.spacing(1),\r\n    paddingLeft: theme.spacing(1),\r\n    paddingBottom: theme.spacing(1)\r\n  }\r\n}));\r\n\r\nfunction NavBar(props) {\r\n  const {\r\n    container,\r\n    algo,\r\n    selectAlgo,\r\n    diag,\r\n    allowDiag,\r\n    heuristic,\r\n    changeHeuristic,\r\n    maze,\r\n    selectMaze,\r\n    animMaze,\r\n    animateMaze,\r\n    anim\r\n  } = props;\r\n  const classes = useStyles();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n  const handleAlgoClick = index => {\r\n    selectAlgo(index);\r\n  };\r\n  const handleHeuristicChange = event => {\r\n    changeHeuristic({ [algo]: event.target.value });\r\n  };\r\n  const handleMazeItemClick = index => {\r\n    selectMaze(index);\r\n  };\r\n\r\n  const drawer = (\r\n    <div>\r\n      <List>\r\n        <ListItem>\r\n          <FormControlLabel\r\n            control={\r\n              <OrangeSwitch\r\n                checked={diag}\r\n                disabled={anim}\r\n                onChange={() => allowDiag(!diag)}\r\n                value=\"allowDiagonals\"\r\n              />\r\n            }\r\n            label=\"Allow Diagonals\"\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <FormControlLabel\r\n            control={\r\n              <OrangeSwitch\r\n                disabled={anim}\r\n                checked={animMaze}\r\n                onChange={() => animateMaze(!animMaze)}\r\n                value=\"animateMaze\"\r\n              />\r\n            }\r\n            label=\"Animate Maze\"\r\n          />\r\n        </ListItem>\r\n        <Divider />\r\n        <Typography variant=\"h6\" className={classes.header}>\r\n          Algorithms\r\n        </Typography>\r\n        <ListItem\r\n          button\r\n          disabled={anim}\r\n          selected={algo === 0}\r\n          onClick={event => {\r\n            handleAlgoClick(0);\r\n          }}\r\n        >\r\n          Dijkstra\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={algo === 1}\r\n          disabled={anim}\r\n          onClick={event => {\r\n            handleAlgoClick(1);\r\n          }}\r\n        >\r\n          A*\r\n          <Collapse in={algo === 1} timeout=\"auto\" unmountOnExit>\r\n            <CardContent>\r\n              <FormLabel>Heuristic</FormLabel>\r\n              <RadioGroup value={heuristic[1]} onChange={handleHeuristicChange}>\r\n                <FormControlLabel\r\n                  size=\"small\"\r\n                  value=\"euclidean\"\r\n                  control={<OrangeRadio />}\r\n                  label=\"Euclidean\"\r\n                />\r\n                <FormControlLabel\r\n                  size=\"small\"\r\n                  value=\"manhatten\"\r\n                  control={<OrangeRadio />}\r\n                  label=\"Manhatten\"\r\n                />\r\n                <FormControlLabel\r\n                  size=\"small\"\r\n                  value=\"chebyshev\"\r\n                  control={<OrangeRadio />}\r\n                  label=\"Chebyshev\"\r\n                />\r\n                <FormControlLabel\r\n                  size=\"small\"\r\n                  value=\"octile\"\r\n                  control={<OrangeRadio />}\r\n                  label=\"Octile\"\r\n                />\r\n              </RadioGroup>\r\n            </CardContent>\r\n          </Collapse>\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={algo === 2}\r\n          disabled={anim}\r\n          onClick={event => {\r\n            handleAlgoClick(2);\r\n          }}\r\n        >\r\n          Jump Point Search\r\n        </ListItem>\r\n        <Divider />\r\n        <Typography variant=\"h6\" className={classes.header}>\r\n          Mazes\r\n        </Typography>\r\n        <ListItem\r\n          button\r\n          selected={maze === 0}\r\n          disabled={anim}\r\n          onClick={event => {\r\n            handleMazeItemClick(0);\r\n          }}\r\n        >\r\n          Kruskal\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={maze === 1}\r\n          disabled={anim}\r\n          onClick={event => {\r\n            handleMazeItemClick(1);\r\n          }}\r\n        >\r\n          Prim\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          selected={maze === 2}\r\n          disabled={anim}\r\n          onClick={event => {\r\n            handleMazeItemClick(2);\r\n          }}\r\n        >\r\n          Recursive Division\r\n        </ListItem>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Pathfinding Visualizer\r\n          </Typography>\r\n          <Button\r\n            className={classes.toolButton}\r\n            variant=\"text\"\r\n            disableElevation\r\n            onClick={() => props.visualize()}\r\n            disabled={anim}\r\n          >\r\n            Visualize\r\n          </Button>\r\n          <Button\r\n            className={classes.toolButton}\r\n            variant=\"text\"\r\n            disableElevation\r\n            onClick={() => {\r\n              props.clearGrid();\r\n            }}\r\n            disabled={anim}\r\n          >\r\n            Clear\r\n          </Button>\r\n          <Button\r\n            variant=\"text\"\r\n            disableElevation\r\n            onClick={() => {\r\n              props.visualizeMaze(animateMaze);\r\n            }}\r\n            disabled={anim}\r\n          >\r\n            Maze\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer}>\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <SwipeableDrawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            onOpen={() => {\r\n              setMobileOpen(true);\r\n            }}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </SwipeableDrawer>\r\n        </Hidden>\r\n        <Hidden smDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            <div className={classes.toolbar} />\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return state;\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  selectAlgo,\r\n  allowDiag,\r\n  changeHeuristic,\r\n  selectMaze,\r\n  animateMaze\r\n})(NavBar);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst VisitedCard = withStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    padding: \"3%\",\r\n    marginBottom: \"2vh\"\r\n  }\r\n})(Card);\r\n\r\nconst Visited = props => {\r\n  const progress = (props.visited * 100) / (props.rows * props.columns);\r\n  return (\r\n    <VisitedCard>\r\n      <Typography variant=\"h6\">Visited</Typography>\r\n      <Typography variant=\"h3\">{props.visited}</Typography>\r\n      <LinearProgress variant=\"determinate\" value={progress} />\r\n    </VisitedCard>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    visited: state.visited\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Visited);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst ShortestPathCard = withStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    padding: \"3%\",\r\n    marginBottom: \"2vh\"\r\n  }\r\n})(Card);\r\n\r\nconst ColorLinearProgress = withStyles({\r\n  colorPrimary: {\r\n    backgroundColor: \"orange\"\r\n  },\r\n  barColorPrimary: {\r\n    backgroundColor: \"white\"\r\n  }\r\n})(LinearProgress);\r\n\r\nconst Shortest = props => {\r\n  const progress = (props.shortest * 100) / (props.rows * props.columns);\r\n  return (\r\n    <ShortestPathCard className=\"shortestPathCard\">\r\n      <Typography variant=\"h6\">Shortest Path</Typography>\r\n      <Typography variant=\"h3\">{props.shortest}</Typography>\r\n      <ColorLinearProgress variant=\"determinate\" value={progress} />\r\n    </ShortestPathCard>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    shortest: state.shortest\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Shortest);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { useTransition, animated } from \"react-spring\";\r\n\r\nconst AlgoInfoCard = withStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    padding: \"3%\",\r\n    marginBottom: \"2vh\",\r\n    marginRight: \"2%\"\r\n  }\r\n})(Card);\r\n\r\nconst getTitle = algo => {\r\n  switch (algo) {\r\n    case 0:\r\n      return \"Dijkstra's Algorithm\";\r\n    case 1:\r\n      return \"A* Search\";\r\n    case 2:\r\n      return \"Jump Point Search\";\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nconst getContent = algo => {\r\n  switch (algo) {\r\n    case 0:\r\n      return `Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph, which may represent, for example, road networks. It was conceived by computer scientist Edsger W. Dijkstra in 1956 and published three years later.\r\n      The algorithm exists in many variants. Dijkstra's original algorithm found the shortest path between two given nodes, but a more common variant fixes a single node as the \"source\" node and finds shortest paths from the source to all other nodes in the graph, producing a shortest-path tree.`;\r\n    case 1:\r\n      return `A* (pronounced \"A-star\") is a graph traversal and path search algorithm, which is often used in computer science due to its completeness, optimality, and optimal efficiency.\r\n      One major practical drawback is its O(b^d) space complexity, as it stores all generated nodes in memory. Thus, in practical travel-routing systems, it is generally outperformed by algorithms which can pre-process the graph to attain better performance,\r\n      as well as memory-bounded approaches; however, A* is still the best solution in many cases.`;\r\n    case 2:\r\n      return `Jump point search (JPS) is an optimization to the A* search algorithm for uniform-cost grids. It reduces symmetries in the search procedure by means of graph pruning, \r\n      eliminating certain nodes in the grid based on assumptions that can be made about the current node's neighbors, as long as certain conditions relating to the grid are satisfied.\r\n       As a result, the algorithm can consider long \"jumps\" along straight (horizontal, vertical and diagonal) lines in the grid, rather than the small steps from one grid position to the next that ordinary A* considers.\r\n       Jump point search preserves A*'s optimality, while potentially reducing its running time by an order of magnitude.`;\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nconst AlgoInfo = props => {\r\n  const transition = useTransition(props.algo, null, {\r\n    from: {\r\n      position: \"absolute\",\r\n      overflowX: \"hidden\",\r\n      transform: \"translateY(-5vh) scale(0.7)\",\r\n      opacity: 0\r\n    },\r\n    enter: { opacity: 1, transform: \"translateY(0vh) scale(1)\" },\r\n    leave: { opacity: 0, transform: \"translateY(5vh) scale(0.7)\" }\r\n  });\r\n  return transition.map(({ item, props, key }) => (\r\n    <animated.div key={key} style={props}>\r\n      <AlgoInfoCard>\r\n        <Typography variant=\"h4\">{getTitle(item)}</Typography>\r\n        <br />\r\n        <Typography variant=\"body1\">{getContent(item)}</Typography>\r\n      </AlgoInfoCard>\r\n    </animated.div>\r\n  ));\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    algo: state.algo\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(AlgoInfo);\r\n","import React from \"react\";\r\nimport Grid from \"./Grid\";\r\nimport NavBar from \"./NavBar\";\r\nimport Visited from \"./Visited\";\r\nimport ShortestPath from \"./ShortestPath\";\r\nimport AlgoInfo from \"./AlgoInfo\";\r\nimport \"../assets/css/App.css\";\r\nimport {\r\n  createMuiTheme,\r\n  ThemeProvider,\r\n  useTheme,\r\n  makeStyles\r\n} from \"@material-ui/core/styles\";\r\nimport { useTrail, animated } from \"react-spring\";\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    background: {\r\n      default: \"#151a35\",\r\n      paper: \"#222b45\"\r\n    },\r\n    divider: \"#151a30\",\r\n    action: {\r\n      hover: \"#598bff66\",\r\n      selected: \"#3366ff4D\",\r\n      active: \"#274bdb\"\r\n    }\r\n  },\r\n  overrides: {\r\n    MuiListItem: {\r\n      root: {\r\n        fontSize: \"1rem\"\r\n      }\r\n    }\r\n    // MuiCssBaseline: {\r\n    //   \"@global\": {\r\n    //     body: {\r\n    //       backgroundImage: \"linear-gradient(to right,red,r)\"\r\n    //     }\r\n    //   }\r\n    // }\r\n  },\r\n  typography: {\r\n    fontFamily: \"'Karla', sans-serif\"\r\n  }\r\n});\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  toolbar: theme.mixins.toolbar\r\n}));\r\n\r\nconst App = () => {\r\n  const gridRef = React.useRef();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const xs = window.matchMedia(\"(max-width: 576px)\").matches;\r\n  const sm = window.matchMedia(\"(min-width: 576px)\").matches;\r\n  const md = window.matchMedia(\"(min-width: 768px)\").matches;\r\n  const lg = window.matchMedia(\"(min-width: 960px)\").matches;\r\n  const xl = window.matchMedia(\"(min-width: 1200px)\").matches;\r\n\r\n  const getRow = () => {\r\n    if (xl) return 41;\r\n    if (lg) return 37;\r\n    if (md) return 39;\r\n    if (sm) return 43;\r\n    if (xs) return 43;\r\n    return 60;\r\n  };\r\n\r\n  const getColumn = () => {\r\n    if (xl) return 61;\r\n    if (lg) return 45;\r\n    if (md) return 51;\r\n    if (sm) return 41;\r\n    if (xs) return 31;\r\n    return 100;\r\n  };\r\n\r\n  const trail = useTrail(4, {\r\n    opacity: 1,\r\n    width: \"100%\",\r\n    marginRight: theme.spacing(2),\r\n    transform: \"translateY(0px) \",\r\n    from: { opacity: 0, transform: \"translateY(100px) \" }\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n      <div className={classes.toolbar} />\r\n      <div className=\"app\">\r\n        <NavBar\r\n          visualize={() => {\r\n            gridRef.current.visualize();\r\n          }}\r\n          clearGrid={() => {\r\n            gridRef.current.clearGrid();\r\n          }}\r\n          visualizeMaze={animateMaze => {\r\n            gridRef.current.visualizeMaze();\r\n          }}\r\n        />\r\n        <div className=\"content\">\r\n          <animated.div style={trail[0]}>\r\n            <Grid ref={gridRef} rows={getRow()} columns={getColumn()} />\r\n          </animated.div>\r\n          <div className=\"data\">\r\n            <div className=\"dataContent\">\r\n              <animated.div style={trail[1]}>\r\n                <Visited rows={getRow()} columns={getColumn()} />\r\n              </animated.div>\r\n              <animated.div style={trail[2]}>\r\n                <ShortestPath rows={getRow()} columns={getColumn()} />\r\n              </animated.div>\r\n            </div>\r\n            <animated.div style={trail[3]}>\r\n              <AlgoInfo />\r\n            </animated.div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\n\r\nconst algoReducer = (algo = 1, action) => {\r\n  if (action.type === \"SELECT_ALGO\") return action.payload;\r\n  return algo;\r\n};\r\n\r\nconst diagReducer = (allowDiag = false, action) => {\r\n  if (action.type === \"ALLOW_DIAG\") return action.payload;\r\n  return allowDiag;\r\n};\r\n\r\nconst heuristicReducer = (heuristic = { 1: \"manhatten\" }, action) => {\r\n  if (action.type === \"CHANGE_HEURISTIC\")\r\n    return { ...heuristic, ...action.payload };\r\n  return heuristic;\r\n};\r\n\r\nconst mazeReducer = (maze = 0, action) => {\r\n  if (action.type === \"SELECT_MAZE\") return action.payload;\r\n  return maze;\r\n};\r\n\r\nconst animMazeReducer = (animMaze = true, action) => {\r\n  if (action.type === \"ANIMATE_MAZE\") return action.payload;\r\n  return animMaze;\r\n};\r\n\r\nconst animatingReducer = (anim = false, action) => {\r\n  if (action.type === \"SET_ANIMATING\") return action.payload;\r\n  return anim;\r\n};\r\n\r\nconst visitedReducer = (visited = 0, action) => {\r\n  switch (action.type) {\r\n    case \"SET_VISITED\":\r\n      return action.payload;\r\n    default:\r\n      return visited;\r\n  }\r\n};\r\n\r\nconst shortestReducer = (shortest = 0, action) => {\r\n  switch (action.type) {\r\n    case \"SET_SHORTEST\":\r\n      return action.payload;\r\n    default:\r\n      return shortest;\r\n  }\r\n};\r\n\r\nexport default combineReducers({\r\n  algo: algoReducer,\r\n  diag: diagReducer,\r\n  heuristic: heuristicReducer,\r\n  maze: mazeReducer,\r\n  animMaze: animMazeReducer,\r\n  anim: animatingReducer,\r\n  visited: visitedReducer,\r\n  shortest: shortestReducer\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore } from \"redux\";\r\nimport reducers from \"./reducers\";\r\n\r\nconst store = createStore(reducers);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}